/*{
	"type": "action",
	"targets": ["omnifocus"],
	"author": "Kaitlin Salzke",
	"identifier": "com.KaitlinSalzke.completeForPrerequisite",
	"version": "1.0",
	"description": "Finds dependant tasks in the currently selected task's note; removes the prerequisite details from the dependant task's note; removes the 'Waiting' tag from the dependant task if no remaining prerequisites; and marks the current task as completed.",
	"label": "Complete For Prerequisite",
	"shortLabel": "Complete For Prerequisite"
}*/
var _ = (function() {
  var action = new PlugIn.Action(function(selection, sender) {
    // action code
    // selection options: tasks, projects, folders, tags

    dependantTag = tagNamed("Activity Type")
      .tagNamed("‚è≥ Waiting")
      .tagNamed("üîí Other task");

    task = selection.tasks[0];

    //get task ID of selected task
    var prerequisiteTaskId = task.id.primaryKey;
    var prerequisiteTask = task;

    // check if created by another task
    var createdByRegex = /\[CREATEDBY: omnifocus:\/\/\/task\/(.+)\]/g;
    var createdByRegexResult = createdByRegex.exec(task.note);

    if (createdByRegexResult != null) {
      console.log("Created by another task!");
      // for each captured task ID
      prerequisiteTaskId = createdByRegexResult[1];
      // get the task with that ID
      tagNamed("üîë").tasks.forEach(function(task) {
        if (task.id.primaryKey == createdByTaskId) {
          prerequisiteTask = task;
          return ApplyResult.Stop;
        }
      });
    }

    // use regex to find [DEPENDANT: taskid] matches in the notes and capture task IDs
    regex = /\[DEPENDANT: omnifocus:\/\/\/task\/(.+)\]/g;
    var regexArray = [];
    while ((regexArray = regex.exec(prerequisiteTask.note)) !== null) {
      // for each captured task ID
      dependantTaskId = regexArray[1];
      // get the task with that ID
      var dependantTask = null;
      dependantTag.tasks.forEach(function(task) {
        if (task.id.primaryKey == dependantTaskId) {
          dependantTask = task;
          return ApplyResult.Stop;
        }
      });
      // remove the prerequisite tag from the dependant task
      dependantTask.note = dependantTask.note.replace(
        "[PREREQUISITE: omnifocus:///task/" + prerequisiteTaskId + "]",
        ""
      );
      // check whether any remaining prerequisite tasks listed in the note (i.e. whether all prerequisites completed) - and if so
      if (!/\[PREREQUISITE:/.test(dependantTask.note)) {
        // if no remaining prerequisites, remove 'Waiting' tag from dependant task
        dependantTask.removeTag(dependantTag);
      }
    }

    // after processing all dependant tasks, mark selected task as completed
    task.markComplete();
  });

  action.validate = function(selection, sender) {
    // validation code
    // selection options: tasks, projects, folders, tags
    return (
      selection.tasks.length === 1 &&
      selection.tasks[0].tags.includes(tagNamed("üîë"))
    );
  };

  return action;
})();
_;
