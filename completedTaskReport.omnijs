/*{
	"type": "action",
	"targets": ["omnifocus"],
	"author": "Kaitlin Salzke",
	"identifier": "com.KaitlinSalzke.completedTaskReport",
	"version": "1.0",
	"description": "Generate report of tasks completed today",
	"label": "Completed Task Report",
	"shortLabel": "Completed Task Report"
}*/

var _ = (function() {
  var action = new PlugIn.Action(function(selection, sender) {
    // ignore tasks with the following tags
    var tagsToExclude = [tagNamed("Activity Type").tagNamed("⏳ Waiting")];
    // send entry to the following Day One journal
    var dayOneJournalName = "Done Today";

    function isHidden(element) {
      return tagsToExclude.includes(element);
    }

    var now = new Date();
    var today = Calendar.current.startOfDay(now);

    // form to confirm desired date
    var inputForm = new Form();

    popupMenu = new Form.Field.Date("dateInput", "Date", today);

    inputForm.addField(popupMenu);

    formPrompt = "Select date:";
    formPromise = inputForm.show(formPrompt, "Continue");

    formPromise.then(function(formObject) {
      date = formObject.values["dateInput"];
      var tasksCompletedToday = new Array();
      library.apply(function(item) {
        if (item instanceof Project && item.task.hasChildren) {
          item.task.apply(tsk => {
            if (tsk.completed && !(tsk instanceof Project)) {
              if (
                Calendar.current.startOfDay(tsk.completionDate).getTime() ==
                  date.getTime() &&
                !tsk.tags.some(isHidden)
              ) {
                tasksCompletedToday.push(tsk);
                return ApplyResult.SkipChildren;
              }
            }
          });
        }
      });

      var markdown = "";
      var currentProject = "";
      tasksCompletedToday.forEach(function(completedTask) {
        if (currentProject !== completedTask.containingProject.name) {
          markdown = markdown.concat(
            "\n**",
            completedTask.containingProject.name,
            "**\n"
          );
          currentProject = completedTask.containingProject.name;
        }
        markdown = markdown.concat(" * ", completedTask.name, "\n");
      });

      var dayOneUrlStr =
        "dayone://post?entry=" +
        encodeURIComponent(markdown) +
        "&journal=" +
        encodeURIComponent(dayOneJournalName);

      URL.fromString(dayOneUrlStr).call(() => {});
    });

    // PROMISE FUNCTION CALLED UPON FORM CANCELLATION
    formPromise.catch(function(err) {
      console.log("form cancelled", err.message);
    });
  });

  action.validate = function(selection, sender) {
    return true;
  };

  return action;
})();
_;
