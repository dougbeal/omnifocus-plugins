/*{
	"type": "action",
	"targets": ["omnifocus"],
	"author": "Kaitlin Salzke",
	"identifier": "com.KaitlinSalzke.noteToSubtasks",
	"version": "1.2",
	"description": "Converts the TaskPaper-formatted note of the selected task into subtasks. Note '[ ]' is recognised as '-' to allow for notes to be generated as part of a TaskPaper template.",
	"label": "TaskPaper Note to Subtasks",
	"shortLabel": "Note to Subtasks"
}*/
var _ = (function() {
  var action = new PlugIn.Action(function(selection, sender) {
    task = selection.tasks[0];

    // get current perspective
    var startingPerspective = document.windows[0].perspective;

    /* // ignore dependent/prerequisite tasks in TaskPaper for subtasks
    var regex = /\[(?:PREREQUISITE|DEPENDANT): omnifocus:\/\/\/task\/.+\]/g;
    var taskpaper = task.note.replace(regex, ""); */

    // ignore everything up to first '[ ]' or '- ' in TaskPaper
    var regex = /^.*?(?=(\[\s\]|-\s))/gs;
    var taskpaper = task.note.replace(regex, "");

    // get note and replace underscores before "[" with tabs -- needed because Shortcut removes tabs from Drafts template
    taskpaper = taskpaper.replace(/(_)+(?=\[)/g, function(match) {
      let underscoreLength = match.length;
      let replacement = "\t".repeat(underscoreLength);
      return replacement;
    });

    // replace '[ ]' with '-'
    taskpaper = taskpaper.replace(/\[\s\]/g, " - ");

    // replace '( )' with '[ ]'
    taskpaper = taskpaper.replace(/\(\s\)/g, "[ ]");

    // replace '< >' with '( )'
    taskpaper = taskpaper.replace(/\<\s\>/g, "( )");

    // build URL to paste tasks
    var pasteUrlStr =
      "omnifocus:///paste?target=/task/" +
      encodeURIComponent(task.id.primaryKey) +
      "&content=" +
      encodeURIComponent(taskpaper);

    //open URL (generating subtasks)
    URL.fromString(pasteUrlStr).call(() => {});

    // return to starting perspective
    var perspectiveUrlStr =
      "omnifocus:///perspective/" +
      encodeURIComponent(startingPerspective.name);
    URL.fromString(perspectiveUrlStr).call(() => {});
  });

  action.validate = function(selection, sender) {
    if (selection.tasks.length === 1) {
      return true;
    } else {
      return false;
    }
  };

  return action;
})();
_;
