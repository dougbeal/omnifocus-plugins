/*{
	"type": "action",
	"targets": ["omnifocus"],
	"author": "Kaitlin Salzke",
	"identifier": "com.KaitlinSalzke.sortByImportance",
	"version": "1.0",
	"description": "",
	"label": "Sort By Importance",
	"shortLabel": "Sort By Importance"
}*/

var _ = (function() {
  var action = new PlugIn.Action(function(selection, sender) {
    // GET CONFIGURATION INFO
    config = PlugIn.find("com.KaitlinSalzke.config").library("configLibrary");
    ignoredFolders = config.ignoredFoldersForSortByImportance; // NB folders including 'Maybe' will also be ignored
    ignoredTags = config.ignoredTagsForSortByImportance;
    sortedTag = config.sortedTag;

    // CREATE SORTING FUNCTIONS TO BE USED LATER

    // mergeSort and merge functions adapted from https://github.com/yeb9925/sorting-algorithms-javascript/blob/master/src/merge_sort/merge_sort_recursion.js
    function mergeSort(unsortedArray) {
      // No need to sort the array if the array only has one element or empty
      if (unsortedArray.length <= 1) {
        return unsortedArray;
      }
      // In order to divide the array in half, we need to figure out the middle
      const middle = Math.floor(unsortedArray.length / 2);

      // This is where we will be dividing the array into left and right
      const left = unsortedArray.slice(0, middle);
      const right = unsortedArray.slice(middle);

      // Using recursion to combine the left and right
      return merge(mergeSort(left), mergeSort(right));
    }
    // Merge the two arrays: left and right
    function merge(left, right) {
      let resultArray = [],
        leftIndex = 0,
        rightIndex = 0;

      // We will concatenate values into the resultArray in order
      while (leftIndex < left.length && rightIndex < right.length) {
        if (left[leftIndex] < right[rightIndex]) {
          resultArray.push(left[leftIndex]);
          leftIndex++; // move left array cursor
        } else {
          resultArray.push(right[rightIndex]);
          rightIndex++; // move right array cursor
        }
      }

      // We need to concat to the resultArray because there will be one element left over after the while loop
      return resultArray
        .concat(left.slice(leftIndex))
        .concat(right.slice(rightIndex));
    }

    // GET UNSORTED ITEMS
    // get all remaining projects not in 'maybe' folder
    projectsList = [];
    library.apply(function(item) {
      if (
        item instanceof Folder &&
        (/Maybe/.test(item.name) ||
          (ignoredFolders.length > 0 && ignoredFolders.includes(item)))
      ) {
        return ApplyResult.SkipChildren;
      }
      if (
        item instanceof Project &&
        (item.task.taskStatus === Task.Status.Available ||
          item.task.taskStatus === Task.Status.Blocked)
      ) {
        projectsList.push(item);
      }
    });

    // if SAL, get all remaining root tasks; otherwise get project - then check if already ranked and if not add to 'unsorted' array
    unsortedItems = [];
    projectsList.forEach(function(project) {
      if (project.containsSingletonActions) {
        project.task.children.forEach(function(task) {
          if (
            (task.taskStatus === Task.Status.Available ||
              task.taskStatus === Task.Status.Blocked) &&
            !task.tags.includes(sortedTag) &&
            (ignoredTags.length > 0 &&
              !task.tags.some(function(tag) {
                return ignoredTags.includes(tag);
              }))
          ) {
            unsortedItems.push(task);
          }
        });
      } else if (!project.task.tags.includes(sortedTag)) {
        unsortedItems.push(project.task);
      }
    });

    console.log(unsortedItems);

    // GET SORTED ITEMS
    sortedItems = [];
    sortedTag.tasks.forEach(function(item) {
      if (
        item.taskStatus === Task.Status.Available ||
        item.taskStatus === Task.Status.Blocked
      ) {
        // push project root tasks & top-level SAL tasks
        if (item.project !== null) {
          sortedItems.push(item);
        } else if (
          item.containingProject.containsSingletonActions &&
          item.containingProject.task.children.includes(item)
        ) {
          sortedItems.push(item);
        }
      }
    });
    console.log(sortedItems);

    console.log(mergeSort([3, 1, 5]));
  });

  action.validate = function(selection, sender) {
    // validation code
    // selection options: tasks, projects, folders, tags
    return true;
  };

  return action;
})();
_;
